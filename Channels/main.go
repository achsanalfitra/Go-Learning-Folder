package main

import (
	"fmt"
	"math/rand"
)

const aNumber int = 1000

// Declaration of a constant, a value that does not change

func randomizer(n int) int {
	aRandomizedValue := rand.Intn(n)
	// Here's a randomizer function that takes n the maximum pool of random number to generate random number up to that pool
	return aRandomizedValue
}

func calculateValue(intChannel chan int) {
	randomNumber := randomizer(aNumber)
	// Here's a function that uses the value generated by the randomizer() and assign its value to the intChannel
	intChannel <- randomNumber
}

func main() {
	intChannel := make(chan int)
	// This is the standard way to make a channel. It is an int channel, meaning only int type can enter it

	defer close(intChannel)
	// The defer keyword works by executing the next function as soon as the parent function executes

	go calculateValue(intChannel)
	// go keyword is used to create go routines

	output := <-intChannel
	// This listens what value in the intChannel is

	fmt.Println(output)
	// Prints the value inside intChannel
}
